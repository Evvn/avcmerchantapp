{"ast":null,"code":"import _objectWithoutProperties from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelfoster/Git/mryum-avc/src/components/Cart/PaymentForm.js\";\nimport React from 'react';\nimport ProcessingPayment from './ProcessingPayment.js';\nimport { injectStripe, PaymentRequestButtonElement, CardElement } from 'react-stripe-elements'; //css\n\nimport './styles/checkout.scss';\n\nvar PaymentForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PaymentForm, _React$Component);\n\n  function PaymentForm(props) {\n    var _this;\n\n    _classCallCheck(this, PaymentForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaymentForm).call(this, props)); // start of attempted apple/google pay stuff\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        processingPayment: true\n      });\n\n      if (_this.props.stripe) {\n        _this.props.stripe.createToken({\n          type: 'card',\n          name: _this.state.customerName,\n          email: _this.state.email\n        }).then(function (result) {\n          // console.log(result);\n          var makePayment = _this.props.makePayment;\n          makePayment(result.token, _this.props.orderTotal * 100, 'Order description...', _this.state.email, _this.state.customerName);\n        });\n      } else {\n        console.log(\"Stripe.js hasn't loaded yet\");\n      }\n    };\n\n    _this.createOptions = function (fontSize, padding) {\n      return {\n        style: {\n          base: {\n            fontSize: fontSize,\n            color: '#424770',\n            letterSpacing: '0.025em',\n            padding: padding\n          },\n          invalid: {\n            color: '#9e2146'\n          }\n        }\n      };\n    };\n\n    var paymentRequest = props.stripe.paymentRequest({\n      country: 'AU',\n      currency: 'aud',\n      total: {\n        label: 'dunno yet',\n        amount: props.orderTotal * 100 // amount needs to be in subunit of currency\n\n      }\n    });\n    paymentRequest.on('click', function () {\n      _this.setState({\n        disableButton: true\n      });\n    });\n    paymentRequest.on('token', function (_ref) {\n      var complete = _ref.complete,\n          token = _ref.token,\n          data = _objectWithoutProperties(_ref, [\"complete\", \"token\"]);\n\n      console.log('Received Stripe token: ', token);\n      console.log('Received customer information: ', data); // this.props.onToken(token, this.props.amount, this.props.desc);\n\n      complete('success');\n    });\n    paymentRequest.canMakePayment().then(function (result) {\n      _this.setState({\n        canMakePayment: !!result\n      });\n    }); // end of it\n\n    _this.state = {\n      hidePaymentRequest: false,\n      disableButton: false,\n      canMakePayment: false,\n      paymentRequest: paymentRequest,\n      email: '',\n      customerName: '',\n      processingPayment: false\n    };\n    return _this;\n  }\n\n  _createClass(PaymentForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          orderTotal = _this$props.orderTotal,\n          paymentRes = _this$props.paymentRes;\n      console.log(paymentRes);\n      console.log('processing ' + this.state.processingPayment);\n      return React.createElement(\"div\", {\n        className: \"paymentScreenCont\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.state.processingPayment ? React.createElement(ProcessingPayment, {\n        paymentRes: paymentRes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }) : '', React.createElement(\"header\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"venue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Winter Village\"), React.createElement(\"img\", {\n        onClick: function onClick() {\n          _this2.props.closePaymentScreen();\n        },\n        src: \"/icons/arrow-left-solid-white.svg\",\n        className: \"headerBackArrow\",\n        alt: \"back arrow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      })), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"checkoutHeading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Checkout\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"paymentHeading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Payment\"), React.createElement(\"input\", {\n        value: this.state.customerName,\n        onChange: function onChange(e) {\n          _this2.setState({\n            customerName: e.target.value\n          });\n        },\n        type: \"text\",\n        className: \"customerName\",\n        placeholder: \"Name for order (required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        value: this.state.email,\n        onChange: function onChange(e) {\n          _this2.setState({\n            email: e.target.value\n          });\n        },\n        type: \"email\",\n        className: \"customerEmail\",\n        placeholder: \"Email for receipt (optional)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, // apple/google pay button hides if you cant use it\n      this.state.canMakePayment && !this.state.hidePaymentRequest ? React.createElement(\"div\", {\n        className: \"paymentRequestCont\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(PaymentRequestButtonElement, {\n        paymentRequest: this.state.paymentRequest,\n        style: {\n          paymentRequestButton: {\n            theme: 'dark',\n            height: '64px'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"payWithCard\",\n        onClick: function onClick(e) {\n          e.preventDefault();\n\n          _this2.setState({\n            hidePaymentRequest: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Pay with card\")) : React.createElement(\"div\", {\n        className: \"cardInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(CardElement, Object.assign({}, this.createOptions('18px', '0px'), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"orderTotal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Order Total\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, orderTotal.toFixed(2))), React.createElement(\"button\", {\n        className: \"payNowBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"PAY NOW\")));\n    }\n  }]);\n\n  return PaymentForm;\n}(React.Component);\n\n;\nexport default injectStripe(PaymentForm);","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum-avc/src/components/Cart/PaymentForm.js"],"names":["React","ProcessingPayment","injectStripe","PaymentRequestButtonElement","CardElement","PaymentForm","props","handleSubmit","e","preventDefault","setState","processingPayment","stripe","createToken","type","name","state","customerName","email","then","result","makePayment","token","orderTotal","console","log","createOptions","fontSize","padding","style","base","color","letterSpacing","invalid","paymentRequest","country","currency","total","label","amount","on","disableButton","complete","data","canMakePayment","hidePaymentRequest","paymentRes","closePaymentScreen","target","value","paymentRequestButton","theme","height","toFixed","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProcessingPayment from './ProcessingPayment.js'\nimport {injectStripe, PaymentRequestButtonElement, CardElement } from 'react-stripe-elements';\n\n//css\nimport './styles/checkout.scss'\n\nclass PaymentForm extends React.Component{\n    constructor(props) {\n        super(props);\n\n        // start of attempted apple/google pay stuff\n        const paymentRequest = props.stripe.paymentRequest({\n            country: 'AU',\n            currency: 'aud',\n            total: {\n                label: 'dunno yet',\n                amount: props.orderTotal * 100, // amount needs to be in subunit of currency\n            },\n        });\n\n        paymentRequest.on('click', () => {\n            this.setState({disableButton: true});\n        });\n\n        paymentRequest.on('token', ({complete, token, ...data}) => {\n            console.log('Received Stripe token: ', token);\n            console.log('Received customer information: ', data);\n            // this.props.onToken(token, this.props.amount, this.props.desc);\n            complete('success')\n        });\n\n        paymentRequest.canMakePayment().then((result) => {\n            this.setState({canMakePayment: !!result});\n        });\n        // end of it\n        this.state = {\n          hidePaymentRequest: false,\n          disableButton: false,\n          canMakePayment: false,\n          paymentRequest,\n          email: '',\n          customerName: '',\n          processingPayment: false,\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.setState({\n          processingPayment: true,\n        })\n        if (this.props.stripe) {\n            this.props.stripe\n             .createToken({type: 'card', name: this.state.customerName, email: this.state.email})\n             .then((result) => {\n              // console.log(result);\n              const { makePayment } = this.props;\n              makePayment(result.token, this.props.orderTotal * 100, 'Order description...', this.state.email, this.state.customerName)\n            } );\n        } else {\n            console.log(\"Stripe.js hasn't loaded yet\")\n        }\n    }\n\n    createOptions = (fontSize, padding) => {\n        return {\n          style: {\n            base: {\n              fontSize,\n              color: '#424770',\n              letterSpacing: '0.025em',\n              padding,\n            },\n            invalid: {\n              color: '#9e2146',\n            },\n          },\n        };\n      };\n\n    render(){\n        const { orderTotal, paymentRes } = this.props;\n        console.log(paymentRes);\n        console.log('processing ' + this.state.processingPayment);\n        return (\n          <div className=\"paymentScreenCont\">\n            { this.state.processingPayment ? <ProcessingPayment paymentRes={paymentRes}/> : '' }\n            <header className=\"header\">\n              <h1 className=\"venue\">Winter Village</h1>\n              <img onClick={() => {this.props.closePaymentScreen()}} src=\"/icons/arrow-left-solid-white.svg\" className=\"headerBackArrow\" alt=\"back arrow\"/>\n            </header>\n\n            <form onSubmit={this.handleSubmit}>\n                <h2 className=\"checkoutHeading\">Checkout</h2>\n\n                <div>\n                  <div className=\"paymentHeading\">\n                    Payment\n                  </div>\n                  <input\n                    value={this.state.customerName}\n                    onChange={(e) => {\n                      this.setState({\n                        customerName: e.target.value\n                      })\n                    }}\n                    type=\"text\"\n                    className=\"customerName\"\n                    placeholder=\"Name for order (required)\" />\n                  <input\n                    value={this.state.email}\n                    onChange={(e) => {\n                      this.setState({\n                        email: e.target.value\n                      })\n                    }}\n                    type=\"email\"\n                    className=\"customerEmail\"\n                    placeholder=\"Email for receipt (optional)\" />\n                  <label>\n                      { // apple/google pay button hides if you cant use it\n                          this.state.canMakePayment && !this.state.hidePaymentRequest ? (\n                            <div className=\"paymentRequestCont\">\n                              <PaymentRequestButtonElement\n                                  paymentRequest={this.state.paymentRequest}\n                                  style={{\n                                      paymentRequestButton: {\n                                          theme: 'dark',\n                                          height: '64px'\n                                      }\n                                  }}\n                              />\n                              <button className=\"payWithCard\" onClick={(e) => {\n                                e.preventDefault()\n                                this.setState({\n                                  hidePaymentRequest: true\n                                })\n                              }}>Pay with card</button>\n                            </div>\n                          ) :\n                          <div className=\"cardInput\">\n                              <CardElement {...this.createOptions('18px', '0px')}/>\n                              {/* hideIcon={true} taken out of CardElement */}\n                          </div>\n                      }\n\n                  </label>\n                </div>\n\n              <div className=\"orderTotal\">\n                <span>Order Total</span>\n                <span>{orderTotal.toFixed(2)}</span>\n              </div>\n              <button className=\"payNowBtn\">PAY NOW</button>\n          </form>\n        </div>\n      )\n    }\n};\n\nexport default injectStripe(PaymentForm);\n"]},"metadata":{},"sourceType":"module"}