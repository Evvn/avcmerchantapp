{"ast":null,"code":"import _objectSpread from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport Airtable from \"airtable\";\nvar API_KEY = process.env.REACT_APP_AIRTABLE_API_KEY;\nAirtable.configure({\n  apiKey: API_KEY,\n  endpointUrl: \"https://api.airtable.com\"\n});\nvar base = Airtable.base(\"app4XnP7NuSCWMWD7\");\n\nvar fetchBase = function fetchBase(_ref) {\n  var venueName = _ref.venueName,\n      baseName = _ref.baseName;\n  return new Promise(function (resolve, reject) {\n    var results = [];\n    base(baseName).select({\n      view: \"Grid view\"\n    }).eachPage(function page(records, fetchNextPage) {\n      // This function (`page`) will get called for each page of records.\n      if (!records.length) {\n        return;\n      }\n\n      results = results.concat(records.map(function (record) {\n        return mapColumns(record);\n      }));\n      fetchNextPage();\n    }, function (error) {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve(results);\n    });\n  });\n};\n\nvar mapColumns = function mapColumns(record) {\n  var id = record.id,\n      fields = record.fields,\n      rest = _objectWithoutProperties(record, [\"id\", \"fields\"]);\n\n  return _objectSpread({\n    id: id\n  }, fields, rest);\n};\n\nvar mapItemColumns = function mapItemColumns(record) {\n  var priceValue = record[\"price_discounted\"];\n  return {\n    id: record.id,\n    name: record[\"Item Name\"],\n    namefr: record[\"name-fr\"],\n    nameel: record[\"name-el\"],\n    namezhcn: record[\"name-zh-CN\"],\n    namees: record[\"name-es\"],\n    nameit: record[\"name-it\"],\n    price: priceValue,\n    tags: record[\"Tags\"],\n    filters: record[\"Tags Filtering\"],\n    image: record[\"Image\"],\n    description: record[\"Item Description\"],\n    descriptionfr: record[\"description-fr\"],\n    descriptionel: record[\"description-el\"],\n    descriptionzhcn: record[\"description-zh-CN\"],\n    descriptiones: record[\"description-es\"],\n    descriptionit: record[\"description-it\"],\n    imageCredit: record[\"image credit\"],\n    sections: record[\"Sections\"],\n    category: record[\"Head Category\"],\n    addons: record[\"Add-On Group\"]\n  };\n};\n\nvar mapAddonColumns = function mapAddonColumns(record) {\n  var priceValue = record[\"price_discounted\"];\n  return {\n    id: record.id,\n    name: record[\"Add-On Name\"],\n    group: record[\"Add-On Group\"],\n    price: Array.isArray(priceValue) ? priceValue[0] : priceValue\n  };\n};\n\nexport default {\n  fetchBase: fetchBase,\n  mapItemColumns: mapItemColumns,\n  mapAddonColumns: mapAddonColumns\n};","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantapp/src/data/airtable.js"],"names":["Airtable","API_KEY","process","env","REACT_APP_AIRTABLE_API_KEY","configure","apiKey","endpointUrl","base","fetchBase","venueName","baseName","Promise","resolve","reject","results","select","view","eachPage","page","records","fetchNextPage","length","concat","map","record","mapColumns","error","id","fields","rest","mapItemColumns","priceValue","name","namefr","nameel","namezhcn","namees","nameit","price","tags","filters","image","description","descriptionfr","descriptionel","descriptionzhcn","descriptiones","descriptionit","imageCredit","sections","category","addons","mapAddonColumns","group","Array","isArray"],"mappings":"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","sourcesContent":["import Airtable from \"airtable\";\n\nconst API_KEY = process.env.REACT_APP_AIRTABLE_API_KEY;\nAirtable.configure({\n  apiKey: API_KEY,\n  endpointUrl: \"https://api.airtable.com\"\n});\nconst base = Airtable.base(\"app4XnP7NuSCWMWD7\");\n\nconst fetchBase = ({ venueName, baseName }) => {\n  return new Promise((resolve, reject) => {\n    let results = [];\n    base(baseName)\n      .select({\n        view: \"Grid view\"\n      })\n      .eachPage(\n        function page(records, fetchNextPage) {\n          // This function (`page`) will get called for each page of records.\n          if (!records.length) {\n            return;\n          }\n\n          results = results.concat(records.map(record => mapColumns(record)));\n          fetchNextPage();\n        },\n        function(error) {\n          if (error) {\n            return reject(error);\n          }\n\n          resolve(results);\n        }\n      );\n  });\n};\n\nconst mapColumns = record => {\n  const { id, fields, ...rest } = record;\n  return {\n    id,\n    ...fields,\n    ...rest\n  };\n};\n\nconst mapItemColumns = record => {\n  const priceValue = record[\"price_discounted\"];\n  return {\n    id: record.id,\n    name: record[\"Item Name\"],\n    namefr: record[\"name-fr\"],\n    nameel: record[\"name-el\"],\n    namezhcn: record[\"name-zh-CN\"],\n    namees: record[\"name-es\"],\n    nameit: record[\"name-it\"],\n    price: priceValue,\n    tags: record[\"Tags\"],\n    filters: record[\"Tags Filtering\"],\n    image: record[\"Image\"],\n    description: record[\"Item Description\"],\n    descriptionfr: record[\"description-fr\"],\n    descriptionel: record[\"description-el\"],\n    descriptionzhcn: record[\"description-zh-CN\"],\n    descriptiones: record[\"description-es\"],\n    descriptionit: record[\"description-it\"],\n    imageCredit: record[\"image credit\"],\n    sections: record[\"Sections\"],\n    category: record[\"Head Category\"],\n    addons: record[\"Add-On Group\"]\n  };\n};\n\nconst mapAddonColumns = record => {\n  const priceValue = record[\"price_discounted\"];\n  return {\n    id: record.id,\n    name: record[\"Add-On Name\"],\n    group: record[\"Add-On Group\"],\n    price: Array.isArray(priceValue) ? priceValue[0] : priceValue\n  };\n};\n\nexport default { fetchBase, mapItemColumns, mapAddonColumns };\n"]},"metadata":{},"sourceType":"module"}