{"ast":null,"code":"import _classCallCheck from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelfoster/Git/avcmerchantapp/src/components/Common/SocketListener.js\";\nimport React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport OrderPanel from '../OrderPanel.js';\nimport _ from 'lodash';\nimport * as actions from './actions/actions.js';\n\nvar SocketListener =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SocketListener, _React$Component);\n\n  function SocketListener(props) {\n    var _this;\n\n    _classCallCheck(this, SocketListener);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SocketListener).call(this, props));\n    _this.state = {\n      response: false,\n      update: false,\n      endpoint: \"localhost:5000\"\n    };\n    _this.old = false;\n    _this.response = false;\n    _this.new = false;\n    return _this;\n  }\n\n  _createClass(SocketListener, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          getOrders = _this$props.getOrders,\n          orders = _this$props.orders;\n      getOrders();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var endpoint = this.state.endpoint;\n      var socket = socketIOClient(endpoint);\n      socket.on(\"FromAPI\", function (data) {\n        console.log(!_.isEqual(data, _this2.response));\n\n        if (!_.isEqual(_this2.data, _this2.response)) {\n          console.log('called');\n          _this2.old = _this2.response;\n          _this2.response = data;\n\n          if (!_.isEqual(_this2.old, _this2.response)) {\n            _this2.forceUpdate();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          orders = _this$props2.orders,\n          isLoading = _this$props2.isLoading,\n          sendSms = _this$props2.sendSms,\n          updateAirtable = _this$props2.updateAirtable,\n          getOrders = _this$props2.getOrders,\n          label = _this$props2.label;\n      var pendingOrders = !isLoading ? orders.pending : [];\n      var completedOrders = !isLoading ? orders.completed : [];\n      var hasPendingOrders = !isLoading ? !!pendingOrders.length : false;\n      var hasCompletedOrders = !isLoading ? !!completedOrders.length : false;\n      var readyOrders = !isLoading ? orders.ready : [];\n      var hasReadyOrders = !isLoading ? !!readyOrders.length : false;\n      var ordersOut;\n      var hasOrders;\n\n      if (window.location.hash === '#pending') {\n        ordersOut = pendingOrders;\n        hasOrders = hasPendingOrders;\n      } else if (window.location.has === '#completed') {\n        ordersOut = completedOrders;\n        hasOrders = hasCompletedOrders;\n      } else {\n        ordersOut = readyOrders;\n        hasOrders = hasReadyOrders;\n      }\n\n      return React.createElement(OrderPanel, {\n        hasOrders: hasOrders,\n        orders: ordersOut,\n        label: label,\n        header: \"Pending Orders\",\n        sendSms: sendSms,\n        updateAirtable: updateAirtable,\n        isLoading: isLoading,\n        getOrders: getOrders,\n        new: !_.isEqual(this.response, this.old),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SocketListener;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(actions, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    router: state.router,\n    orders: state.common.orders,\n    isLoading: state.common.isLoading\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantapp/src/components/Common/SocketListener.js"],"names":["React","socketIOClient","connect","bindActionCreators","OrderPanel","_","actions","SocketListener","props","state","response","update","endpoint","old","new","getOrders","orders","socket","on","data","console","log","isEqual","forceUpdate","isLoading","sendSms","updateAirtable","label","pendingOrders","pending","completedOrders","completed","hasPendingOrders","length","hasCompletedOrders","readyOrders","ready","hasReadyOrders","ordersOut","hasOrders","window","location","hash","has","Component","mapDispatchToProps","dispatch","mapStateToProps","router","common"],"mappings":"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","sourcesContent":["import React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport OrderPanel from '../OrderPanel.js';\nimport _ from 'lodash';\n\nimport * as actions from './actions/actions.js';\n\nclass SocketListener extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            response: false,\n            update: false,\n            endpoint: \"localhost:5000\",\n        }\n\n        this.old = false;\n        this.response = false;\n        this.new = false\n    }\n\n    componentWillMount(){\n        const {  getOrders, orders } = this.props;\n        getOrders();\n     }\n\n    componentDidMount(){\n        const { endpoint} = this.state;\n        const socket = socketIOClient(endpoint);\n        socket.on(\"FromAPI\", data => {\n            console.log(!_.isEqual(data, this.response))\n            if(!_.isEqual(this.data, this.response)){\n                console.log('called')\n                this.old = this.response;\n                this.response = data;\n                if(!_.isEqual(this.old, this.response)){\n                    this.forceUpdate();\n                }\n            }\n        });\n    }\n\n    render(){\n\n        const { orders, isLoading, sendSms, updateAirtable, getOrders, label } = this.props;\n        const pendingOrders = !isLoading ? orders.pending : [];\n        const completedOrders = !isLoading ? orders.completed : [];\n        const hasPendingOrders = !isLoading ? !!pendingOrders.length : false;\n        const hasCompletedOrders = !isLoading ? !!completedOrders.length : false;\n        const readyOrders = !isLoading ? orders.ready : [];\n        const hasReadyOrders = !isLoading ? !!readyOrders.length : false;\n        \n\n        let ordersOut;\n        let hasOrders;\n        if(window.location.hash === '#pending'){\n            ordersOut = pendingOrders;\n            hasOrders = hasPendingOrders;\n        }\n        else if(window.location.has === '#completed'){\n            ordersOut = completedOrders;\n            hasOrders = hasCompletedOrders;\n        } else{\n            ordersOut = readyOrders;\n            hasOrders = hasReadyOrders;\n        }\n            return (\n                <OrderPanel\n                      hasOrders={hasOrders}\n                      orders={ordersOut}\n                      label={label}\n                      header=\"Pending Orders\"\n                      sendSms={sendSms}\n                      updateAirtable={updateAirtable}\n                      isLoading={isLoading}\n                      getOrders={getOrders}\n                      new={!_.isEqual(this.response, this.old)}\n                />\n            );\n        }\n    \n} \n\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  router: state.router,\n  orders: state.common.orders,\n  isLoading: state.common.isLoading,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);"]},"metadata":{},"sourceType":"module"}