{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addToOrder),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeFromOrder),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(makePayment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js'; // eslint-disable-next-line\n\nimport _ from 'lodash';\nimport { takeLatest, put, select } from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderUtils.js';\nimport { actions } from 'redux-router5';\nimport callBff from '../callBff.js';\nexport function addToOrder(action) {\n  var getCurrentOrder, currentOrder, newItem, orderClone, nextCurrentOrder;\n  return _regeneratorRuntime.wrap(function addToOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n\n          getCurrentOrder = function getCurrentOrder(state) {\n            return state.persistentCart.currentOrder;\n          };\n\n          _context.next = 4;\n          return select(getCurrentOrder);\n\n        case 4:\n          currentOrder = _context.sent;\n          _context.next = 7;\n          return orderUtils.buildItemTemplate(action.item, action.quantity);\n\n        case 7:\n          newItem = _context.sent;\n          _context.next = 10;\n          return _.cloneDeep(currentOrder);\n\n        case 10:\n          orderClone = _context.sent;\n          nextCurrentOrder = {};\n\n          if (orderClone[newItem.id]) {\n            nextCurrentOrder[newItem.id] = [newItem].concat(orderClone[newItem.id]);\n          } else {\n            nextCurrentOrder[newItem.id] = [newItem];\n          }\n\n          _context.next = 15;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_SUCCESS,\n            currentOrder: _objectSpread({}, nextCurrentOrder, orderClone)\n          });\n\n        case 15:\n          _context.next = 22;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 22;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_FAILURE,\n            error: _context.t0\n          });\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 17]]);\n}\nexport function removeFromOrder(action) {\n  var getCurrentOrder, currentOrder, orderClone;\n  return _regeneratorRuntime.wrap(function removeFromOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n\n          getCurrentOrder = function getCurrentOrder(state) {\n            return state.persistentCart.currentOrder;\n          };\n\n          _context2.next = 4;\n          return select(getCurrentOrder);\n\n        case 4:\n          currentOrder = _context2.sent;\n          _context2.next = 7;\n          return _.cloneDeep(currentOrder);\n\n        case 7:\n          orderClone = _context2.sent;\n          _context2.next = 10;\n          return console.log(orderClone);\n\n        case 10:\n          delete orderClone[action.id];\n          _context2.next = 13;\n          return put({\n            type: actionTypes.REMOVE_FROM_ORDER_SUCCESS,\n            currentOrder: orderClone\n          });\n\n        case 13:\n          _context2.next = 20;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 20;\n          return put({\n            type: actionTypes.REMOVE_FROM_ORDER_FAILURE,\n            error: _context2.t0\n          });\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 15]]);\n}\n/*****************************************************\n *  Needs to be moved to backend since stripe secret\n *  is needed\n*/\n\nexport function makePayment(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function makePayment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return callBff(\"ordering/payment\", 'POST', {\n            amount: action.amount,\n            currency: 'aud',\n            source: action.token.id,\n            description: action.desc\n          }).then(function (response) {\n            return response;\n          });\n\n        case 3:\n          res = _context3.sent;\n          console.log(res); // then call bff stuff for airtable, ask about specifics later\n\n          /*\n            const getCurrentOrder = state => state.persistentCart.currentOrder;\n            let currentOrder = yield select(getCurrentOrder);\n              yield put({\n              type: actionTypes.RECORD_ORDER, // have another saga for action type then empty cart\n              id: response.data,\n              cartItems: currentOrder.items,\n            }) \n          */\n\n          _context3.next = 10;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n/**************************************************** */\n\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return [takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToOrder), takeLatest(actionTypes.REMOVE_FROM_ORDER_REQUEST, removeFromOrder), takeLatest(actionTypes.MAKE_STRIPE_CHARGE, makePayment)];\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum-avc/src/integration/sagas/cartIntegration.js"],"names":["addToOrder","removeFromOrder","makePayment","actionWatcher","actionTypes","_","takeLatest","put","select","orderUtils","actions","callBff","action","getCurrentOrder","state","persistentCart","currentOrder","buildItemTemplate","item","quantity","newItem","cloneDeep","orderClone","nextCurrentOrder","id","concat","type","ADD_TO_ORDER_SUCCESS","console","log","ADD_TO_ORDER_FAILURE","error","REMOVE_FROM_ORDER_SUCCESS","REMOVE_FROM_ORDER_FAILURE","amount","currency","source","token","description","desc","then","response","res","ADD_TO_ORDER_REQUEST","REMOVE_FROM_ORDER_REQUEST","MAKE_STRIPE_CHARGE"],"mappings":"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","sourcesContent":["import * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js';\n// eslint-disable-next-line\nimport _ from 'lodash';\nimport { takeLatest, put, select,} from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderUtils.js';\nimport { actions } from 'redux-router5';\nimport callBff from '../callBff.js'\n\n\n\nexport function* addToOrder(action) {\n  try {\n    \n    const getCurrentOrder = state => state.persistentCart.currentOrder;\n    let currentOrder = yield select(getCurrentOrder);\n    const newItem = yield orderUtils.buildItemTemplate(action.item, action.quantity);\n    let orderClone = yield _.cloneDeep(currentOrder);\n\n    const nextCurrentOrder = {};\n    \n    if(orderClone[newItem.id]){\n        nextCurrentOrder[newItem.id] = [newItem].concat(orderClone[newItem.id]);\n    }\n    else{\n      nextCurrentOrder[newItem.id] = [newItem];\n    }\n\n    yield put({\n      type: actionTypes.ADD_TO_ORDER_SUCCESS,\n      currentOrder: {...nextCurrentOrder, ...orderClone},\n    });\n\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.ADD_TO_ORDER_FAILURE,\n      error,\n    })\n  }\n}\n\nexport function* removeFromOrder(action) {\n  try {\n    const getCurrentOrder = state => state.persistentCart.currentOrder;\n    let currentOrder = yield select(getCurrentOrder);\n    let orderClone = yield _.cloneDeep(currentOrder);\n    yield console.log(orderClone);\n    delete orderClone[action.id];\n      yield put({\n        type: actionTypes.REMOVE_FROM_ORDER_SUCCESS,\n        currentOrder: orderClone,\n      })\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.REMOVE_FROM_ORDER_FAILURE,\n      error,\n    })\n  }\n}\n\n/*****************************************************\n *  Needs to be moved to backend since stripe secret\n *  is needed\n*/\n\nexport function* makePayment(action) {\n  try {\n    const res = yield callBff(`ordering/payment`, 'POST', { \n      amount: action.amount,\n      currency: 'aud',\n      source: action.token.id,\n      description: action.desc,\n    }).then((response) => response)\n    \n    console.log(res);\n      // then call bff stuff for airtable, ask about specifics later\n      /*\n        const getCurrentOrder = state => state.persistentCart.currentOrder;\n        let currentOrder = yield select(getCurrentOrder);\n \n        yield put({\n          type: actionTypes.RECORD_ORDER, // have another saga for action type then empty cart\n          id: response.data,\n          cartItems: currentOrder.items,\n        }) \n      */\n  } catch (error) {\n    console.log(error)\n  }\n}\n/**************************************************** */\n\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToOrder),\n    takeLatest(actionTypes.REMOVE_FROM_ORDER_REQUEST, removeFromOrder),\n    takeLatest(actionTypes.MAKE_STRIPE_CHARGE, makePayment)\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}