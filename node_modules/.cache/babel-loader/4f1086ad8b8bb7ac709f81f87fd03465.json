{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(sendSms),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCompleteOrders),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateOrders),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Common/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put } from 'redux-saga/effects';\nimport callBff from '../callBff.js';\nimport Airtable from \"../../data/airtable\";\nimport Orders from \"../../data/orders\";\nimport Items from \"../../data/items\";\nimport Addons from \"../../data/addons\";\nexport function sendSms(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function sendSms$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return callBff(\"ordering/sms\", 'POST', {\n            message: action.message\n          }).then(function (response) {\n            return response;\n          });\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return put({\n            type: actionTypes.SEND_SMS_SUCCESS,\n            res: res\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n;\nexport function getCompleteOrders() {\n  var rawOrders, orderState;\n  return _regeneratorRuntime.wrap(function getCompleteOrders$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return airtableFetch();\n\n        case 2:\n          rawOrders = _context2.sent;\n          _context2.next = 5;\n          return utils.mapOrdersToData(rawOrders);\n\n        case 5:\n          orderState = _context2.sent;\n          _context2.next = 8;\n          return put({\n            type: actionTypes.GET_ORDERS_SUCCESS,\n            orderState: orderState\n          });\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n;\nexport function updateOrders(action) {\n  return _regeneratorRuntime.wrap(function updateOrders$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put({\n            type: actionTypes.GET_ORDERS_SUCCESS,\n            orderState: action.orderState\n          });\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return [takeLatest(actionTypes.SEND_SMS_REQUEST, sendSms), takeLatest(actionTypes.GET_ORDERS_REQUEST, getCompleteOrders), takeLatest(actionTypes.UPDATE_ORDER_STATE_REQUEST, updateOrders)];\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantappN/src/integration/sagas/ordersIntegration.js"],"names":["sendSms","getCompleteOrders","updateOrders","actionWatcher","actionTypes","takeLatest","put","callBff","Airtable","Orders","Items","Addons","action","message","then","response","res","type","SEND_SMS_SUCCESS","airtableFetch","rawOrders","utils","mapOrdersToData","orderState","GET_ORDERS_SUCCESS","SEND_SMS_REQUEST","GET_ORDERS_REQUEST","UPDATE_ORDER_STATE_REQUEST"],"mappings":";;;;yBAWiBA,O;;;yBAUAC,iB;;;yBAWAC,Y;;;yBAOAC,a;;AAvCjB,OAAO,KAAKC,WAAZ,MAA6B,4DAA7B;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAIA,OAAO,SAAUX,OAAV,CAAkBY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,iBAAML,OAAO,iBAAiB,MAAjB,EAAyB;AAAEM,YAAAA,OAAO,EAAED,MAAM,CAACC;AAAlB,WAAzB,CAAP,CACbC,IADa,CACR,UAAAC,QAAQ;AAAA,mBAAIA,QAAJ;AAAA,WADA,CAAN;;AADP;AACCC,UAAAA,GADD;AAAA;AAGD,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACc,gBADV;AAERF,YAAAA,GAAG,EAAHA;AAFQ,WAAD,CAAT;;AAHC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAON;AAGD,OAAO,SAAUf,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEe,iBAAMkB,aAAa,EAAnB;;AAFf;AAEGC,UAAAA,SAFH;AAAA;AAGgB,iBAAMC,KAAK,CAACC,eAAN,CAAsBF,SAAtB,CAAN;;AAHhB;AAGGG,UAAAA,UAHH;AAAA;AAKH,iBAAMjB,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACoB,kBADV;AAERD,YAAAA,UAAU,EAAVA;AAFQ,WAAD,CAAT;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASN;AAED,OAAO,SAAUrB,YAAV,CAAuBU,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMN,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACoB,kBADV;AAERD,YAAAA,UAAU,EAAEX,MAAM,CAACW;AAFX,WAAD,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAUpB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAM,CACJE,UAAU,CAACD,WAAW,CAACqB,gBAAb,EAA+BzB,OAA/B,CADN,EAEJK,UAAU,CAACD,WAAW,CAACsB,kBAAb,EAAiCzB,iBAAjC,CAFN,EAGJI,UAAU,CAACD,WAAW,CAACuB,0BAAb,EAAyCzB,YAAzC,CAHN,CAAN;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as actionTypes from '../../components/Common/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put } from 'redux-saga/effects';\nimport callBff from '../callBff.js'\n\nimport Airtable from \"../../data/airtable\";\nimport Orders from \"../../data/orders\";\nimport Items from \"../../data/items\";\nimport Addons from \"../../data/addons\";\n\n\n\nexport function* sendSms(action) {\n  const res = yield callBff(`ordering/sms`, 'POST', { message: action.message })\n      .then(response => response)\n      yield put({\n        type: actionTypes.SEND_SMS_SUCCESS,\n        res,\n      })\n};\n\n\nexport function* getCompleteOrders() {\n  \n    const rawOrders = yield airtableFetch();\n    const orderState = yield utils.mapOrdersToData(rawOrders);\n\n    yield put({\n      type: actionTypes.GET_ORDERS_SUCCESS,\n      orderState,\n    })\n};\n\nexport function* updateOrders(action) {\n  yield put({\n    type: actionTypes.GET_ORDERS_SUCCESS,\n    orderState: action.orderState,\n  })\n}\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.SEND_SMS_REQUEST, sendSms),\n    takeLatest(actionTypes.GET_ORDERS_REQUEST, getCompleteOrders),\n    takeLatest(actionTypes.UPDATE_ORDER_STATE_REQUEST, updateOrders),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}