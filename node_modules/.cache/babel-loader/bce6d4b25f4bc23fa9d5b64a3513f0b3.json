{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addToOrder),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeFromOrder),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(makePayment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js'; // eslint-disable-next-line\n\nimport _ from 'lodash';\nimport { takeLatest, put, select } from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderUtils.js';\nimport { actions } from 'redux-router5';\nexport function addToOrder(action) {\n  var getCurrentOrder, currentOrder, newItem, orderClone, nextCurrentOrder;\n  return _regeneratorRuntime.wrap(function addToOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n\n          getCurrentOrder = function getCurrentOrder(state) {\n            return state.persistentCart.currentOrder;\n          };\n\n          _context.next = 4;\n          return select(getCurrentOrder);\n\n        case 4:\n          currentOrder = _context.sent;\n          _context.next = 7;\n          return orderUtils.buildItemTemplate(action.item, action.quantity);\n\n        case 7:\n          newItem = _context.sent;\n          _context.next = 10;\n          return _.cloneDeep(currentOrder);\n\n        case 10:\n          orderClone = _context.sent;\n          nextCurrentOrder = {};\n\n          if (orderClone[newItem.id]) {\n            nextCurrentOrder[newItem.id] = [newItem].concat(orderClone[newItem.id]);\n          } else {\n            nextCurrentOrder[newItem.id] = [newItem];\n          }\n\n          _context.next = 15;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_SUCCESS,\n            currentOrder: _objectSpread({}, nextCurrentOrder, orderClone)\n          });\n\n        case 15:\n          _context.next = 22;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 22;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_FAILURE,\n            error: _context.t0\n          });\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 17]]);\n}\nexport function removeFromOrder(action) {\n  var getCurrentOrder, currentOrder;\n  return _regeneratorRuntime.wrap(function removeFromOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n\n          getCurrentOrder = function getCurrentOrder(state) {\n            return state.persistentCart.currentOrder;\n          };\n\n          _context2.next = 4;\n          return select(getCurrentOrder);\n\n        case 4:\n          currentOrder = _context2.sent;\n          currentOrder = orderUtils.removeFromOrder(currentOrder, action.item, action.quantity);\n          _context2.next = 8;\n          return put({\n            type: actionTypes.REMOVE_FROM_ORDER_SUCCESS,\n            currentOrder: currentOrder\n          });\n\n        case 8:\n          _context2.next = 15;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 15;\n          return put({\n            type: actionTypes.REMOVE_FROM_ORDER_FAILURE,\n            error: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n/*****************************************************\n *  Needs to be moved to backend since stripe secret\n *  is needed\n*/\n\nvar stripeAuthHeader = {\n  \"Content-Type\": \"application/x-www-form-urlencoded\",\n  Authorization: \"Bearer \".concat(process.env.REACT_APP_STRIPE_SK) // ask for this later\n\n};\nexport function makePayment(action) {\n  return _regeneratorRuntime.wrap(function makePayment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return fetch(\"https://api.stripe.com/v1/charges\", {\n            method: 'POST',\n            body: {\n              source: action.token.id,\n              amount: actions.amount,\n              description: actions.desc,\n              currency: 'aud'\n            },\n            headers: stripeAuthHeader\n          }).then(function (res) {\n            return res.json();\n          }).then(function (response) {\n            console.log('Success:', JSON.stringify(response)); // then call bff stuff for airtable, ask about specifics later\n\n            /*\n              const getCurrentOrder = state => state.persistentCart.currentOrder;\n              let currentOrder = yield select(getCurrentOrder);\n                yield put({\n                type: actionTypes.RECORD_ORDER, // have another saga for action type then empty cart\n                id: response.data,\n                cartItems: currentOrder.items,\n              }) \n            */\n          }).catch(function (error) {\n            return console.error('Error:', error);\n          });\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 5]]);\n}\n/**************************************************** */\n\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return [takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToOrder), takeLatest(actionTypes.REMOVE_FROM_ORDER_REQUEST, removeFromOrder), takeLatest(actionTypes.MAKE_STRIPE_CHARGE, makePayment)];\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum-avc/src/integration/sagas/cartIntegration.js"],"names":["addToOrder","removeFromOrder","makePayment","actionWatcher","actionTypes","_","takeLatest","put","select","orderUtils","actions","action","getCurrentOrder","state","persistentCart","currentOrder","buildItemTemplate","item","quantity","newItem","cloneDeep","orderClone","nextCurrentOrder","id","concat","type","ADD_TO_ORDER_SUCCESS","console","log","ADD_TO_ORDER_FAILURE","error","REMOVE_FROM_ORDER_SUCCESS","REMOVE_FROM_ORDER_FAILURE","stripeAuthHeader","Authorization","process","env","REACT_APP_STRIPE_SK","fetch","method","body","source","token","amount","description","desc","currency","headers","then","res","json","response","JSON","stringify","catch","ADD_TO_ORDER_REQUEST","REMOVE_FROM_ORDER_REQUEST","MAKE_STRIPE_CHARGE"],"mappings":"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","sourcesContent":["import * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js';\n// eslint-disable-next-line\nimport _ from 'lodash';\nimport { takeLatest, put, select,} from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderUtils.js';\nimport { actions } from 'redux-router5';\n\n\n\nexport function* addToOrder(action) {\n  try {\n    \n    const getCurrentOrder = state => state.persistentCart.currentOrder;\n    let currentOrder = yield select(getCurrentOrder);\n    const newItem = yield orderUtils.buildItemTemplate(action.item, action.quantity);\n    let orderClone = yield _.cloneDeep(currentOrder);\n\n    const nextCurrentOrder = {};\n    \n    if(orderClone[newItem.id]){\n        nextCurrentOrder[newItem.id] = [newItem].concat(orderClone[newItem.id]);\n    }\n    else{\n      nextCurrentOrder[newItem.id] = [newItem];\n    }\n\n    yield put({\n      type: actionTypes.ADD_TO_ORDER_SUCCESS,\n      currentOrder: {...nextCurrentOrder, ...orderClone},\n    });\n\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.ADD_TO_ORDER_FAILURE,\n      error,\n    })\n  }\n}\n\nexport function* removeFromOrder(action) {\n  try {\n    const getCurrentOrder = state => state.persistentCart.currentOrder;\n    let currentOrder = yield select(getCurrentOrder);\n    currentOrder = orderUtils.removeFromOrder(currentOrder, action.item, action.quantity);\n      yield put({\n        type: actionTypes.REMOVE_FROM_ORDER_SUCCESS,\n        currentOrder,\n      })\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.REMOVE_FROM_ORDER_FAILURE,\n      error,\n    })\n  }\n}\n\n/*****************************************************\n *  Needs to be moved to backend since stripe secret\n *  is needed\n*/\nconst stripeAuthHeader = {\n  \"Content-Type\": \"application/x-www-form-urlencoded\",\n  Authorization: `Bearer ${process.env.REACT_APP_STRIPE_SK}` // ask for this later\n};\n\nexport function* makePayment(action) {\n  try {\n    yield fetch(\"https://api.stripe.com/v1/charges\",{\n      method: 'POST',\n      body: {\n        source: action.token.id,\n        amount: actions.amount,\n        description: actions.desc,\n        currency: 'aud'\n      },\n      headers: stripeAuthHeader\n    }).then(res => res.json())\n    .then(response => {\n      console.log('Success:', JSON.stringify(response))\n      // then call bff stuff for airtable, ask about specifics later\n      /*\n        const getCurrentOrder = state => state.persistentCart.currentOrder;\n        let currentOrder = yield select(getCurrentOrder);\n \n        yield put({\n          type: actionTypes.RECORD_ORDER, // have another saga for action type then empty cart\n          id: response.data,\n          cartItems: currentOrder.items,\n        }) \n      */\n\n      }).catch(error => console.error('Error:', error));\n  } catch (error) {\n    console.log(error)\n  }\n}\n/**************************************************** */\n\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToOrder),\n    takeLatest(actionTypes.REMOVE_FROM_ORDER_REQUEST, removeFromOrder),\n    takeLatest(actionTypes.MAKE_STRIPE_CHARGE, makePayment)\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}