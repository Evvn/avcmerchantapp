{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/michaelfoster/Git/avcmerchantappN/src/App.js\";\nimport * as Pusher from \"pusher-js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Route, Switch } from 'react-router'; // react-router v4\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport dayjs from \"dayjs\";\nimport * as actions from './components/Common/actions/actions.js';\nimport NotFound from './components/NotFound/NotFound.js';\nimport LoadingScreen from './components/LoadingScreen/LoadingScreen.js';\nimport Airtable from \"./data/airtable\";\nimport Orders from \"./data/orders\";\nimport Items from \"./data/items\";\nimport Addons from \"./data/addons\";\nimport logo from \"./Mr_Yum_logo_white.svg\";\nimport OrderPanel from './components/OrderPanel.js';\nimport OrderRow from \"./components/order-row\";\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Jumbotron, Badge } from 'reactstrap';\nimport './App.css';\nimport \"react-toastify/dist/ReactToastify.css\"; // Pusher Setup and Channels\n// NOTE: Has to have the 'client-' prefix otherwise Pusher rejects the event.\n// https://pusher.com/docs/client_api_guide/client_events#trigger-events\n\nvar ORDER_COMPLETE_EVENT = \"client-complete-order\";\nvar ORDER_CHANNEL_NAME = \"private-order-channel\";\nvar ORDER_ADDED_EVENT = \"new-order\";\nvar pusher = new Pusher(process.env.REACT_APP_PUSHER_APP_KEY, {\n  authEndpoint: process.env.REACT_APP_PUSHER_DOMAIN + \"/pusher/auth\",\n  cluster: \"ap1\"\n}); //////////////////////////////////////////////////////////////////////////////\n\nvar connectionStyles = function connectionStyles(status) {\n  return {\n    height: \"18px\",\n    width: \"18px\",\n    borderRadius: \"10px\",\n    backgroundColor: status === STATUS.CONNECTED ? \"green\" : status === STATUS.CONNECTING ? \"orange\" : \"red\",\n    marginLeft: \"5px\"\n  };\n};\n\nvar statusStyles = {\n  background: \"white\",\n  fontSize: \"16px\",\n  zIndex: \"2\",\n  display: \"flex\",\n  alignItems: \"center\",\n  marginLeft: \"30px\",\n  borderRadius: \"50px\",\n  height: \"40px\",\n  marginTop: \"5px\",\n  padding: \"10px\"\n}; ////////////////////////////////////////////////////////////////////////////////\n\nvar STATUS = {\n  CONNECTED: \"connected\",\n  CONNECTING: \"connecting\"\n};\nvar STATUS_LABELS = {\n  connected: \"Connected\",\n  connecting: \"Connecting\",\n  disconnected: \"Disconnected\"\n}; //////////////////////////////////////////////////////////////////////////////////\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      connectionStatus: {\n        previous: null,\n        current: \"connecting\"\n      },\n      currentView: '#pending'\n    };\n    _this.channel = null;\n    _this.updateOrderItem = _this.updateOrderItem.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderOrderItem = _this.renderOrderItem.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.mapOrdersToData = _this.mapOrdersToData.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.itemsWithData = this.itemsWithData.bind(this);\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var _this$props, getOrders, orders;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, getOrders = _this$props.getOrders, orders = _this$props.orders;\n                getOrders();\n\n                if (orders) {\n                  this.mapOrdersToData({\n                    orders: orders\n                  }).then(function (response) {\n                    if (response.success) {\n                      /**\n                       * Pusher has been added to listen to new orders from a customer.\n                       *\n                       * It will append new orders to the current state of orders so that the\n                       * staff are able to see them live.\n                       */\n                      _this2.channel = pusher.subscribe(ORDER_CHANNEL_NAME);\n\n                      _this2.channel.bind(ORDER_ADDED_EVENT, function (orders) {\n                        if (!Array.isArray(orders)) {\n                          return;\n                        }\n\n                        _this2.mapOrdersToData({\n                          orders: orders,\n                          appendOrders: true\n                        }).then(function (response) {\n                          toast.dismiss();\n                          toast(\"A new order has arrived!\");\n                        });\n                      });\n\n                      _this2.channel.bind(ORDER_COMPLETE_EVENT, function (_ref) {\n                        var orderToUpdate = _ref.orderToUpdate;\n\n                        if (orderToUpdate) {\n                          _this2.updateOrderItem(orderToUpdate, true);\n                        }\n                      });\n                    } else {\n                      toast.error(\"Having troubles loading, please refresh the page.\");\n                    }\n                  });\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"componentWillUpdate\",\n    value: function () {\n      var _componentWillUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var _this$props2, getOrders, orders;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props2 = this.props, getOrders = _this$props2.getOrders, orders = _this$props2.orders;\n                getOrders();\n\n                if (orders) {\n                  this.mapOrdersToData({\n                    orders: orders\n                  }).then(function (response) {\n                    if (response.success) {\n                      /**\n                       * Pusher has been added to listen to new orders from a customer.\n                       *\n                       * It will append new orders to the current state of orders so that the\n                       * staff are able to see them live.\n                       */\n                      _this3.channel = pusher.subscribe(ORDER_CHANNEL_NAME);\n\n                      _this3.channel.bind(ORDER_ADDED_EVENT, function (orders) {\n                        if (!Array.isArray(orders)) {\n                          return;\n                        }\n\n                        _this3.mapOrdersToData({\n                          orders: orders,\n                          appendOrders: true\n                        }).then(function (response) {\n                          toast.dismiss();\n                          toast(\"A new order has arrived!\");\n                        });\n                      });\n\n                      _this3.channel.bind(ORDER_COMPLETE_EVENT, function (_ref2) {\n                        var orderToUpdate = _ref2.orderToUpdate;\n\n                        if (orderToUpdate) {\n                          _this3.updateOrderItem(orderToUpdate, true);\n                        }\n                      });\n                    } else {\n                      toast.error(\"Having troubles loading, please refresh the page.\");\n                    }\n                  });\n                }\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillUpdate() {\n        return _componentWillUpdate.apply(this, arguments);\n      }\n\n      return componentWillUpdate;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      localStorage.clear('persist:persistedStore');\n    }\n  }, {\n    key: \"updateOrderItem\",\n    value: function updateOrderItem(orderToUpdate) {\n      var _this4 = this;\n\n      var isFromPusher = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _this$props3 = this.props,\n          updateOrderState = _this$props3.updateOrderState,\n          orders = _this$props3.orders;\n      this.updateOrderState({\n        orders: orders.map(function (order) {\n          if (order.id === orderToUpdate.id) {\n            return _objectSpread({}, order, orderToUpdate);\n          }\n\n          return order;\n        })\n      }, function () {\n        // TODO: Notify others in the channel that we have updated an order item\n        // We don't want other staff seeing an order that has been completed, you know??\n        if (!isFromPusher) {\n          _this4.channel.trigger(ORDER_COMPLETE_EVENT, {\n            orderToUpdate: orderToUpdate\n          });\n        }\n      });\n    }\n  }, {\n    key: \"mapOrdersToData\",\n    value: function mapOrdersToData(_ref3) {\n      var _this5 = this;\n\n      var orders = _ref3.orders,\n          _ref3$appendOrders = _ref3.appendOrders,\n          appendOrders = _ref3$appendOrders === void 0 ? false : _ref3$appendOrders;\n      var updateOrderState = this.props.updateOrderState;\n      var addons = orders.addons,\n          items = orders.items;\n      return new Promise(function (resolve, reject) {\n        try {\n          var squishedOrders = orders.orders.reduce(function (result, currentOrder) {\n            var item_id = currentOrder.item_id,\n                addons = currentOrder.addons,\n                quantity = currentOrder.quantity,\n                rest = _objectWithoutProperties(currentOrder, [\"item_id\", \"addons\", \"quantity\"]);\n\n            var _item_id = _slicedToArray(item_id, 1),\n                itemId = _item_id[0]; // Grab the first as we only ever have 1 item id\n\n\n            var possibleTransaction = result.findIndex(function (order) {\n              return order.stripe_transaction_id === currentOrder.stripe_transaction_id;\n            });\n            var currentTransaction = result[possibleTransaction] || rest;\n\n            if (!currentTransaction.combinedItems) {\n              currentTransaction.combinedItems = [{\n                item_id: itemId,\n                addons: addons,\n                quantity: quantity\n              }];\n            } else {\n              currentTransaction.combinedItems.push({\n                item_id: itemId,\n                addons: addons,\n                quantity: quantity\n              });\n            }\n\n            if (possibleTransaction > -1) {\n              result[possibleTransaction] = currentTransaction;\n            } else {\n              result.push(currentTransaction);\n            }\n\n            return result;\n          }, []);\n          updateOrderState({\n            orders: [].concat(_toConsumableArray(squishedOrders.map(function (order) {\n              return _objectSpread({}, order, {\n                items: _this5.itemsWithData(order)\n              });\n            })), _toConsumableArray(appendOrders ? orders : [])),\n            isLoading: false\n          }, function () {\n            resolve({\n              success: true\n            });\n          });\n        } catch (error) {\n          reject({\n            success: false,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"routeTo\",\n    value: function routeTo(suffix) {\n      window.location = \"/\".concat(suffix);\n    }\n  }, {\n    key: \"renderOrderItem\",\n    value: function renderOrderItem(order) {\n      if (!!order.items) {\n        return React.createElement(OrderRow, {\n          key: order.id,\n          order: order,\n          updateOrder: this.updateOrderItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      // eslint-disable-next-line\n      var orders = this.props.orders;\n      var connectionStatus = this.state.connectionStatus;\n      console.log(this.props.orders);\n      var isLoading = orders ? false : true;\n      var pendingOrders = !orders ? false : orders.orders.filter(function (order) {\n        return !order.processed;\n      });\n      var completedOrders = !orders ? false : orders.orders.filter(function (order) {\n        return !!order.processed;\n      }).sort(function (a, b) {\n        // Sorts the completed orders by the completed_time field\n        var firstItem = dayjs(a.completed_time ? a.completed_time : a.created_time);\n        var secondItem = dayjs(b.completed_time ? b.completed_time : b.created_time);\n\n        if (firstItem.isBefore(secondItem)) {\n          return 1;\n        }\n\n        if (firstItem.isAfter(secondItem)) {\n          return -1;\n        } // The dates are the same\n\n\n        return 0;\n      });\n      var hasPendingOrders = !!pendingOrders.length;\n      var hasCompletedOrders = !!completedOrders.length;\n      var routes = [{\n        name: 'home',\n        path: '#pending'\n      }, {\n        name: 'about',\n        path: '#ready'\n      }, {\n        name: 'whatwedo',\n        path: '#completed'\n      }];\n      var displayedRoutes = {\n        pending: {\n          label: \"Pending Orders\",\n          amount: \"(\".concat(pendingOrders.length, \")\"),\n          path: routes[0].path\n        },\n        ready: {\n          label: \"Ready For Pickup\",\n          amount: \"(\".concat(pendingOrders.length, \")\"),\n          path: routes[1].path\n        },\n        completed: {\n          label: \"Completed Orders\",\n          amount: \"(\".concat(completedOrders.length, \")\"),\n          path: routes[2].path\n        }\n      }; // const path = router.location.pathname.split('/')[1];\n      // const showMenu = venueNames ? venueNames.includes(path) ? true : false : false;\n\n      return React.createElement(\"div\", {\n        style: {\n          display: 'block'\n        },\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, React.createElement(ToastContainer, {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 1000,\n        pauseOnHover: false,\n        pauseOnFocusLoss: false,\n        hideProgressBar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        className: \"mercNav\",\n        expand: \"md\",\n        fixed: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, React.createElement(NavbarBrand, {\n        href: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: {\n          height: \"50px\",\n          color: \"blue\"\n        },\n        src: logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: statusStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          marginLeft: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, STATUS_LABELS[connectionStatus.current], \" \"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: connectionStyles(connectionStatus.current),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }))))), React.createElement(NavbarToggler, {\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }), React.createElement(Collapse, {\n        isOpen: this.state.isOpen,\n        navbar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        className: \"ml-auto\",\n        navbar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, !isLoading ? Object.keys(displayedRoutes).map(function (key) {\n        return React.createElement(NavItem, {\n          className: \"nlink\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"navigationLink\",\n          onClick: function onClick() {\n            _this6.clickNav(displayedRoutes[key].path);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          className: \"nlink\",\n          href: displayedRoutes[key].path,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 375\n          },\n          __self: this\n        }, displayedRoutes[key].label, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377\n          },\n          __self: this\n        }), displayedRoutes[key].amount), React.createElement(\"div\", {\n          className: \"blueRectBelow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380\n          },\n          __self: this\n        })));\n      }) : null))), isLoading ? React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"panelContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, this.state.currentView === '#pending' ? React.createElement(\"div\", {\n        id: \"pending\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(OrderPanel, {\n        hasOrders: hasPendingOrders,\n        orders: pendingOrders,\n        renderOrderItem: this.renderOrderItem,\n        label: \"pending\",\n        header: \"Pending Orders\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      })) : null, this.state.currentView === '#ready' ? React.createElement(\"div\", {\n        id: \"ready\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(OrderPanel, {\n        hasOrders: hasPendingOrders,\n        orders: pendingOrders,\n        renderOrderItem: this.renderOrderItem,\n        label: \"ready\",\n        header: \"Orders Ready for Pickup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      })) : null, this.state.currentView === '#completed' ? React.createElement(\"div\", {\n        id: \"completed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(OrderPanel, {\n        hasOrders: hasCompletedOrders,\n        orders: completedOrders,\n        renderOrderItem: this.renderOrderItem,\n        label: \"completed\",\n        header: \"Completed Orders\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      })) : null));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(actions, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    router: state.router,\n    orders: state.common.orders\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantappN/src/App.js"],"names":["Pusher","React","connect","bindActionCreators","BrowserRouter","Router","Route","Switch","ToastContainer","toast","dayjs","actions","NotFound","LoadingScreen","Airtable","Orders","Items","Addons","OrderPanel","OrderRow","Collapse","Navbar","NavbarToggler","NavbarBrand","Nav","NavItem","NavLink","Jumbotron","Badge","ORDER_COMPLETE_EVENT","ORDER_CHANNEL_NAME","ORDER_ADDED_EVENT","pusher","process","env","REACT_APP_PUSHER_APP_KEY","authEndpoint","REACT_APP_PUSHER_DOMAIN","cluster","connectionStyles","status","height","width","borderRadius","backgroundColor","STATUS","CONNECTED","CONNECTING","marginLeft","statusStyles","background","fontSize","zIndex","display","alignItems","marginTop","padding","STATUS_LABELS","connected","connecting","disconnected","App","props","state","connectionStatus","previous","current","currentView","channel","updateOrderItem","bind","renderOrderItem","mapOrdersToData","getOrders","orders","then","response","success","subscribe","Array","isArray","appendOrders","dismiss","orderToUpdate","error","localStorage","clear","isFromPusher","updateOrderState","map","order","id","trigger","addons","items","Promise","resolve","reject","squishedOrders","reduce","result","currentOrder","item_id","quantity","rest","itemId","possibleTransaction","findIndex","stripe_transaction_id","currentTransaction","combinedItems","push","itemsWithData","isLoading","suffix","window","location","console","log","pendingOrders","filter","processed","completedOrders","sort","a","b","firstItem","completed_time","created_time","secondItem","isBefore","isAfter","hasPendingOrders","length","hasCompletedOrders","routes","name","path","displayedRoutes","pending","label","amount","ready","completed","POSITION","TOP_RIGHT","color","logo","toggle","isOpen","Object","keys","key","clickNav","Component","mapDispatchToProps","dispatch","mapStateToProps","router","common"],"mappings":"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","sourcesContent":["import * as Pusher from \"pusher-js\";\nimport React from 'react';\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux'\nimport { BrowserRouter as Router} from \"react-router-dom\";\nimport { Route, Switch } from 'react-router' // react-router v4\nimport { ToastContainer, toast } from \"react-toastify\";\nimport dayjs from \"dayjs\";\n\nimport * as actions from './components/Common/actions/actions.js';\nimport NotFound from './components/NotFound/NotFound.js';\nimport LoadingScreen from './components/LoadingScreen/LoadingScreen.js';\nimport Airtable from \"./data/airtable\";\nimport Orders from \"./data/orders\";\nimport Items from \"./data/items\";\nimport Addons from \"./data/addons\";\nimport logo from './Mr_Yum_logo_white.svg';\nimport OrderPanel from './components/OrderPanel.js';\nimport OrderRow from \"./components/order-row\";\n\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Jumbotron,\n  Badge,\n} from 'reactstrap';\n\nimport './App.css';\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Pusher Setup and Channels\n// NOTE: Has to have the 'client-' prefix otherwise Pusher rejects the event.\n// https://pusher.com/docs/client_api_guide/client_events#trigger-events\nconst ORDER_COMPLETE_EVENT = \"client-complete-order\";\nconst ORDER_CHANNEL_NAME = \"private-order-channel\";\nconst ORDER_ADDED_EVENT = \"new-order\";\nconst pusher = new Pusher(process.env.REACT_APP_PUSHER_APP_KEY, {\n  authEndpoint: process.env.REACT_APP_PUSHER_DOMAIN + \"/pusher/auth\",\n  cluster: \"ap1\"\n});\n//////////////////////////////////////////////////////////////////////////////\n\nconst connectionStyles = status => {\n  return {\n    height: \"18px\",\n    width: \"18px\",\n    borderRadius: \"10px\",\n    backgroundColor:\n      status === STATUS.CONNECTED\n        ? \"green\"\n        : status === STATUS.CONNECTING\n        ? \"orange\"\n        : \"red\",\n    marginLeft: \"5px\",\n  };\n};\n\nconst statusStyles = {\n  background: \"white\",\n  fontSize: \"16px\",\n  zIndex: \"2\",\n  display: \"flex\",\n  alignItems: \"center\",\n  marginLeft: \"30px\",\n  borderRadius: \"50px\",\n  height: \"40px\",\n  marginTop: \"5px\",\n  padding: \"10px\"\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst STATUS = {\n  CONNECTED: \"connected\",\n  CONNECTING: \"connecting\"\n};\n\nconst STATUS_LABELS = {\n  connected: \"Connected\",\n  connecting: \"Connecting\",\n  disconnected: \"Disconnected\",\n};\n\n//////////////////////////////////////////////////////////////////////////////////\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connectionStatus: {\n        previous: null,\n        current: \"connecting\"\n      },\n      currentView: '#pending',\n    };\n\n    this.channel = null;\n\n    this.updateOrderItem = this.updateOrderItem.bind(this);\n    this.renderOrderItem = this.renderOrderItem.bind(this);\n    this.mapOrdersToData = this.mapOrdersToData.bind(this);\n    //this.itemsWithData = this.itemsWithData.bind(this);\n  }\n\n  async componentWillMount(){\n    const { getOrders, orders } = this.props;\n    getOrders();\n\n    if(orders){\n      this.mapOrdersToData({ orders }).then(response => {\n        if (response.success) {\n          /**\n           * Pusher has been added to listen to new orders from a customer.\n           *\n           * It will append new orders to the current state of orders so that the\n           * staff are able to see them live.\n           */\n          this.channel = pusher.subscribe(ORDER_CHANNEL_NAME);\n          this.channel.bind(ORDER_ADDED_EVENT, orders => {\n            if (!Array.isArray(orders)) {\n              return;\n            }\n            this.mapOrdersToData({ orders, appendOrders: true }).then(\n              response => {\n                toast.dismiss();\n                toast(\"A new order has arrived!\");\n              }\n            );\n          });\n          this.channel.bind(ORDER_COMPLETE_EVENT, ({ orderToUpdate }) => {\n            if (orderToUpdate) {\n              this.updateOrderItem(orderToUpdate, true);\n            }\n          });\n        } else {\n          toast.error(\"Having troubles loading, please refresh the page.\");\n        }\n      });\n    }\n  }\n\n  async componentWillUpdate(){\n    const { getOrders, orders } = this.props;\n    getOrders();\n\n    if(orders){\n      this.mapOrdersToData({ orders }).then(response => {\n        if (response.success) {\n          /**\n           * Pusher has been added to listen to new orders from a customer.\n           *\n           * It will append new orders to the current state of orders so that the\n           * staff are able to see them live.\n           */\n          this.channel = pusher.subscribe(ORDER_CHANNEL_NAME);\n          this.channel.bind(ORDER_ADDED_EVENT, orders => {\n            if (!Array.isArray(orders)) {\n              return;\n            }\n            this.mapOrdersToData({ orders, appendOrders: true }).then(\n              response => {\n                toast.dismiss();\n                toast(\"A new order has arrived!\");\n              }\n            );\n          });\n          this.channel.bind(ORDER_COMPLETE_EVENT, ({ orderToUpdate }) => {\n            if (orderToUpdate) {\n              this.updateOrderItem(orderToUpdate, true);\n            }\n          });\n        } else {\n          toast.error(\"Having troubles loading, please refresh the page.\");\n        }\n      });\n    }\n  }\n\n  componentWillUnmount(){\n    localStorage.clear('persist:persistedStore')\n  }\n\n  updateOrderItem(orderToUpdate, isFromPusher = false) {\n    const {updateOrderState, orders} = this.props;\n    this.updateOrderState(\n      {\n        orders: orders.map(order => {\n          if (order.id === orderToUpdate.id) {\n            return {\n              ...order,\n              ...orderToUpdate\n            };\n          }\n          return order;\n        })\n      },\n      () => {\n        // TODO: Notify others in the channel that we have updated an order item\n        // We don't want other staff seeing an order that has been completed, you know??\n\n        if (!isFromPusher) {\n          this.channel.trigger(ORDER_COMPLETE_EVENT, { orderToUpdate });\n        }\n      }\n    );\n  }\n\n  mapOrdersToData({ orders, appendOrders = false }) {\n    const {updateOrderState} = this.props;\n    const { addons, items } = orders\n    return new Promise((resolve, reject) => {\n      try {\n        const squishedOrders = orders.orders.reduce((result, currentOrder) => {\n          const { item_id, addons, quantity, ...rest } = currentOrder;\n          const [itemId] = item_id; // Grab the first as we only ever have 1 item id\n          const possibleTransaction = result.findIndex(\n            order =>\n              order.stripe_transaction_id === currentOrder.stripe_transaction_id\n          );\n\n          let currentTransaction = result[possibleTransaction] || rest;\n\n          if (!currentTransaction.combinedItems) {\n            currentTransaction.combinedItems = [\n              {\n                item_id: itemId,\n                addons,\n                quantity\n              }\n            ];\n          } else {\n            currentTransaction.combinedItems.push({\n              item_id: itemId,\n              addons,\n              quantity\n            });\n          }\n\n          if (possibleTransaction > -1) {\n            result[possibleTransaction] = currentTransaction;\n          } else {\n            result.push(currentTransaction);\n          }\n\n          return result;\n        }, []);\n\n        \n        updateOrderState(\n          {\n            orders: [\n              ...squishedOrders.map(order => {\n                return {\n                  ...order,\n                  items: this.itemsWithData(order)\n                };\n              }),\n              ...(appendOrders ? orders : [])\n            ],\n            isLoading: false\n          },\n          () => {\n            resolve({ success: true });\n          }\n        );\n      } catch (error) {\n        reject({ success: false, error });\n      }\n    });\n  }\n\n  routeTo(suffix){\n    window.location = `/${suffix}`;\n  }\n\n  renderOrderItem(order) {\n    if (!!order.items) {\n      return (\n        <OrderRow\n          key={order.id}\n          order={order}\n          updateOrder={this.updateOrderItem}\n        />\n      );\n    }\n    return null;\n  }\n\n  render() {\n    // eslint-disable-next-line\n    const { orders } = this.props\n    const {connectionStatus} = this.state;\n    console.log(this.props.orders);\n    const isLoading = orders ? false : true;\n\n    const pendingOrders = !orders ? false : orders.orders\n      .filter(order => !order.processed)\n      \n    const completedOrders = !orders ? false : orders.orders\n      .filter(order => !!order.processed)\n      .sort((a, b) => {\n        // Sorts the completed orders by the completed_time field\n        const firstItem = dayjs(\n          a.completed_time ? a.completed_time : a.created_time\n        );\n        const secondItem = dayjs(\n          b.completed_time ? b.completed_time : b.created_time\n        );\n\n        if (firstItem.isBefore(secondItem)) {\n          return 1;\n        }\n\n        if (firstItem.isAfter(secondItem)) {\n          return -1;\n        }\n\n        // The dates are the same\n        return 0;\n      });\n    const hasPendingOrders = !!pendingOrders.length;\n    const hasCompletedOrders = !!completedOrders.length;\n\n    const routes = [\n      { name: 'home', path: '#pending' },\n      { name: 'about', path: '#ready' },\n      { name: 'whatwedo', path: '#completed' },\n    ];\n\n    const displayedRoutes = {\n      pending: { label: `Pending Orders`, amount: `(${pendingOrders.length})`, path: routes[0].path },\n      ready: { label: `Ready For Pickup`, amount: `(${pendingOrders.length})`, path: routes[1].path },\n      completed: { label: `Completed Orders`, amount: `(${completedOrders.length})`, path: routes[2].path },\n    };\n\n    // const path = router.location.pathname.split('/')[1];\n    // const showMenu = venueNames ? venueNames.includes(path) ? true : false : false;\n    return (\n      <div style={{display: 'block'}} className=\"App\">\n        <ToastContainer\n          position={toast.POSITION.TOP_RIGHT}\n          autoClose={1000}\n          pauseOnHover={false}\n          pauseOnFocusLoss={false}\n          hideProgressBar={true}\n        />\n        <Navbar className=\"mercNav\" expand=\"md\" fixed=\"top\">\n          <NavbarBrand href=\"/\">\n            <div style={{display: 'flex'}}>\n              <img style={{ height: \"50px\", color: \"blue\" }} src={logo} />\n              <div style={statusStyles}>\n              <div style={{marginLeft: \"10px\"}}>\n                {STATUS_LABELS[connectionStatus.current]}{\" \"}\n                </div>\n                  <div >\n                    <div style={connectionStyles(connectionStatus.current)} />\n                  </div>\n              </div>\n            </div>\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              {!isLoading ? Object.keys(displayedRoutes).map(key => (\n                <NavItem className=\"nlink\" >\n                  <div className=\"navigationLink\" onClick ={() => {this.clickNav(displayedRoutes[key].path)}}>\n                    <NavLink className=\"nlink\" href={displayedRoutes[key].path}>\n                    {displayedRoutes[key].label}\n                    <br/>\n                    {displayedRoutes[key].amount}\n                    </NavLink>\n                    <div className=\"blueRectBelow\"></div>\n                  </div>\n                </NavItem>\n              )): null}\n            </Nav>\n          </Collapse>\n        </Navbar>\n        {isLoading ? <LoadingScreen /> : (\n        <div className=\"panelContainer\">\n            {this.state.currentView=== '#pending' ? (\n              <div id=\"pending\">\n                <OrderPanel\n                  hasOrders={hasPendingOrders}\n                  orders={pendingOrders}\n                  renderOrderItem={this.renderOrderItem}\n                  label='pending'\n                  header=\"Pending Orders\"\n                />\n              </div>) : null}\n              {this.state.currentView === '#ready' ? (\n              <div id=\"ready\">\n                <OrderPanel\n                  hasOrders={hasPendingOrders}\n                  orders={pendingOrders}\n                  renderOrderItem={this.renderOrderItem}\n                  label='ready'\n                  header=\"Orders Ready for Pickup\"\n                />\n              </div>) : null}\n              {this.state.currentView === '#completed' ? (\n              <div id=\"completed\">\n                <OrderPanel\n                  hasOrders={hasCompletedOrders}\n                  orders={completedOrders}\n                  renderOrderItem={this.renderOrderItem}\n                  label='completed'\n                  header=\"Completed Orders\"\n                />\n              </div>) : null}\n      </div> \n    )}\n  </div>);\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  router: state.router,\n  orders: state.common.orders,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}