{"ast":null,"code":"import _classCallCheck from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelfoster/Git/avcmerchantapp/src/components/Common/SocketListener.js\";\nimport React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport OrderPanel from '../OrderPanel.js';\nimport _ from 'lodash';\nimport * as actions from './actions/actions.js';\n\nvar SocketListener =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SocketListener, _React$Component);\n\n  function SocketListener(props) {\n    var _this;\n\n    _classCallCheck(this, SocketListener);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SocketListener).call(this, props));\n    _this.state = {\n      response: false,\n      update: false,\n      endpoint: \"localhost:5000\"\n    };\n    return _this;\n  }\n\n  _createClass(SocketListener, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          getOrders = _this$props.getOrders,\n          orders = _this$props.orders;\n      getOrders();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          endpoint = _this$state.endpoint,\n          response = _this$state.response;\n      var socket = socketIOClient(endpoint);\n      socket.on(\"FromAPI\", function (data) {\n        console.log(data, response);\n\n        if (!_.isEqual(data, response)) {\n          _this2.setState({\n            response: data\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          orders = _this$props2.orders,\n          isLoading = _this$props2.isLoading,\n          sendSms = _this$props2.sendSms,\n          updateAirtable = _this$props2.updateAirtable,\n          getOrders = _this$props2.getOrders;\n      var pendingOrders = !isLoading ? orders.pending : [];\n      var completedOrders = !isLoading ? orders.completed : [];\n      var hasPendingOrders = !isLoading ? !!pendingOrders.length : false;\n      var hasCompletedOrders = !isLoading ? !!completedOrders.length : false;\n      return React.createElement(OrderPanel, {\n        hasOrders: hasPendingOrders,\n        orders: pendingOrders,\n        label: \"pending\",\n        header: \"Pending Orders\",\n        sendSms: sendSms,\n        updateAirtable: updateAirtable,\n        isLoading: isLoading,\n        getOrders: getOrders,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SocketListener;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(actions, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    router: state.router,\n    orders: state.common.orders,\n    isLoading: state.common.isLoading\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantapp/src/components/Common/SocketListener.js"],"names":["React","socketIOClient","connect","bindActionCreators","OrderPanel","_","actions","SocketListener","props","state","response","update","endpoint","getOrders","orders","socket","on","data","console","log","isEqual","setState","isLoading","sendSms","updateAirtable","pendingOrders","pending","completedOrders","completed","hasPendingOrders","length","hasCompletedOrders","Component","mapDispatchToProps","dispatch","mapStateToProps","router","common"],"mappings":"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","sourcesContent":["import React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport OrderPanel from '../OrderPanel.js';\nimport _ from 'lodash';\n\nimport * as actions from './actions/actions.js';\n\nclass SocketListener extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            response: false,\n            update: false,\n            endpoint: \"localhost:5000\",\n        }\n    }\n\n    componentWillMount(){\n        const {  getOrders, orders } = this.props;\n        getOrders();\n     }\n\n    componentDidMount(){\n        const { endpoint, response } = this.state;\n        const socket = socketIOClient(endpoint);\n        socket.on(\"FromAPI\", data => {\n            console.log(data, response)\n            if(!_.isEqual(data, response)){\n                this.setState({ response: data })\n            }\n        });\n    }\n\n    render(){\n\n\n        const { orders, isLoading, sendSms, updateAirtable, getOrders } = this.props;\n        const pendingOrders = !isLoading ? orders.pending : [];\n        const completedOrders = !isLoading ? orders.completed : [];\n        const hasPendingOrders = !isLoading ? !!pendingOrders.length : false;\n        const hasCompletedOrders = !isLoading ? !!completedOrders.length : false;\n\n        \n            return (\n                <OrderPanel\n                      hasOrders={hasPendingOrders}\n                      orders={pendingOrders}\n                      label='pending'\n                      header=\"Pending Orders\"\n                      sendSms={sendSms}\n                      updateAirtable={updateAirtable}\n                      isLoading={isLoading}\n                      getOrders={getOrders}\n                />\n            );\n        }\n    \n} \n\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  router: state.router,\n  orders: state.common.orders,\n  isLoading: state.common.isLoading,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);"]},"metadata":{},"sourceType":"module"}