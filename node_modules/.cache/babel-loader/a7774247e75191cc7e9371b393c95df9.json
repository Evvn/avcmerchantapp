{"ast":null,"code":"import _classCallCheck from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelfoster/Git/avcmerchantapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelfoster/Git/avcmerchantapp/src/components/Common/SocketListener.js\";\nimport React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport OrderPanel from '../OrderPanel.js';\nimport * as actions from './actions/actions.js';\n\nvar SocketListener =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SocketListener, _React$Component);\n\n  function SocketListener(props) {\n    var _this;\n\n    _classCallCheck(this, SocketListener);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SocketListener).call(this, props));\n    _this.state = {\n      current: false,\n      previous: false,\n      endpoint: \"localhost:5000\"\n    };\n    return _this;\n  }\n\n  _createClass(SocketListener, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          getOrders = _this$props.getOrders,\n          orders = _this$props.orders;\n      getOrders();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          endpoint = _this$state.endpoint,\n          current = _this$state.current;\n      var socket = socketIOClient(endpoint);\n      socket.on(\"FromAPI\", function (data) {\n        return _this2.setState({\n          previous: current,\n          current: data\n        }, _this2.checkUpdate(current, data));\n      });\n    }\n  }, {\n    key: \"checkUpdate\",\n    value: function checkUpdate(previous, current) {\n      var refresh = this.props.refresh;\n\n      if (previous !== current) {\n        refresh();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          orders = _this$props2.orders,\n          isLoading = _this$props2.isLoading,\n          sendSms = _this$props2.sendSms,\n          updateAirtable = _this$props2.updateAirtable,\n          getOrders = _this$props2.getOrders;\n      var pendingOrders = !isLoading ? orders.pending : [];\n      var completedOrders = !isLoading ? orders.completed : [];\n      var hasPendingOrders = !isLoading ? !!pendingOrders.length : false;\n      var hasCompletedOrders = !isLoading ? !!completedOrders.length : false;\n\n      if (isLoading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, \"Loading\");\n      } else {\n        return React.createElement(OrderPanel, {\n          hasOrders: hasPendingOrders,\n          orders: pendingOrders,\n          label: \"pending\",\n          header: \"Pending Orders\",\n          sendSms: sendSms,\n          updateAirtable: updateAirtable,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return SocketListener;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(actions, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    router: state.router,\n    orders: state.common.orders,\n    isLoading: state.common.isLoading\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantapp/src/components/Common/SocketListener.js"],"names":["React","socketIOClient","connect","bindActionCreators","OrderPanel","actions","SocketListener","props","state","current","previous","endpoint","getOrders","orders","socket","on","data","setState","checkUpdate","refresh","isLoading","sendSms","updateAirtable","pendingOrders","pending","completedOrders","completed","hasPendingOrders","length","hasCompletedOrders","Component","mapDispatchToProps","dispatch","mapStateToProps","router","common"],"mappings":"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","sourcesContent":["import React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport OrderPanel from '../OrderPanel.js';\n\nimport * as actions from './actions/actions.js';\n\nclass SocketListener extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            current: false,\n            previous: false,\n            endpoint: \"localhost:5000\",\n        }\n    }\n\n    componentWillMount(){\n        const {  getOrders, orders } = this.props;\n        getOrders();\n     }\n\n    componentDidMount(){\n        const { endpoint, current } = this.state;\n        const socket = socketIOClient(endpoint);\n        socket.on(\"FromAPI\", data => this.setState({ previous: current, current: data },\n            this.checkUpdate(current, data)));\n    }\n\n    checkUpdate(previous, current){\n        const { refresh } = this.props;\n        if(previous !== current){\n          refresh();\n        }\n    }\n\n    render(){\n\n        const { orders, isLoading, sendSms, updateAirtable, getOrders } = this.props;\n        const pendingOrders = !isLoading ? orders.pending : [];\n        const completedOrders = !isLoading ? orders.completed : [];\n        const hasPendingOrders = !isLoading ? !!pendingOrders.length : false;\n        const hasCompletedOrders = !isLoading ? !!completedOrders.length : false;\n\n        if(isLoading){\n            return (<div>Loading</div>)\n        } else {\n            return (\n                <OrderPanel\n                      hasOrders={hasPendingOrders}\n                      orders={pendingOrders}\n                      label='pending'\n                      header=\"Pending Orders\"\n                      sendSms={sendSms}\n                      updateAirtable={updateAirtable}\n                />\n            );\n        }\n    }\n} \n\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  router: state.router,\n  orders: state.common.orders,\n  isLoading: state.common.isLoading,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);"]},"metadata":{},"sourceType":"module"}