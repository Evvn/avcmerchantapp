{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(sendSms),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCompleteOrders),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateOrders),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Common/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put } from 'redux-saga/effects';\nimport callBff from '../callBff.js';\nimport Airtable from \"../../data/airtable\";\nimport Orders from \"../../data/orders\";\nimport Items from \"../../data/items\";\nimport Addons from \"../../data/addons\";\nexport function sendSms(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function sendSms$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return callBff(\"ordering/sms\", 'POST', {\n            message: action.message\n          }).then(function (response) {\n            return response;\n          });\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return put({\n            type: actionTypes.SEND_SMS_SUCCESS,\n            res: res\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n;\nexport function getCompleteOrders() {\n  var venueName, orderState;\n  return _regeneratorRuntime.wrap(function getCompleteOrders$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          venueName = \"Hopscotch\";\n          orderState = {};\n          _context2.next = 4;\n          return Airtable.fetchBase({\n            venueName: venueName,\n            baseName: \"Orders\"\n          }).then(function (response) {\n            Orders.setAll({\n              venueName: venueName,\n              items: response\n            });\n            var currentOrders = Orders.getAll(\"Hopscotch\");\n            orderState.orders = currentOrders;\n          });\n\n        case 4:\n          _context2.next = 6;\n          return Airtable.fetchBase({\n            venueName: venueName,\n            baseName: \"Database\"\n          }).then(function (response) {\n            Items.setAll({\n              items: response.map(Airtable.mapItemColumns),\n              venueName: venueName\n            });\n            var currentItems = Items.getAll(\"Hopscotch\");\n            orderState.items = currentItems;\n          });\n\n        case 6:\n          _context2.next = 8;\n          return Airtable.fetchBase({\n            venueName: venueName,\n            baseName: \"Add-On by Group\"\n          }).then(function (response) {\n            Addons.setAll({\n              addons: response.map(Airtable.mapAddonColumns),\n              venueName: venueName\n            });\n            var currentAddons = Addons.getAll(\"Hopscotch\");\n            orderState.addons = currentAddons;\n          });\n\n        case 8:\n          _context2.next = 10;\n          return put({\n            type: actionTypes.GET_ORDERS_SUCCESS,\n            orderState: orderState\n          });\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n;\nexport function updateOrders(action) {\n  return _regeneratorRuntime.wrap(function updateOrders$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put({\n            type: actionTypes.GET_ORDERS_SUCCESS,\n            orderState: action.orderState\n          });\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return [takeLatest(actionTypes.SEND_SMS_REQUEST, sendSms), takeLatest(actionTypes.GET_ORDERS_REQUEST, getCompleteOrders), takeLatest(actionTypes.UPDATE_ORDER_STATE_REQUEST, updateOrders)];\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantappN/src/integration/sagas/ordersIntegration.js"],"names":["sendSms","getCompleteOrders","updateOrders","actionWatcher","actionTypes","takeLatest","put","callBff","Airtable","Orders","Items","Addons","action","message","then","response","res","type","SEND_SMS_SUCCESS","venueName","orderState","fetchBase","baseName","setAll","items","currentOrders","getAll","orders","map","mapItemColumns","currentItems","addons","mapAddonColumns","currentAddons","GET_ORDERS_SUCCESS","SEND_SMS_REQUEST","GET_ORDERS_REQUEST","UPDATE_ORDER_STATE_REQUEST"],"mappings":";;;;yBAWiBA,O;;;yBASAC,iB;;;yBAmDAC,Y;;;yBAOAC,a;;AA9EjB,OAAO,KAAKC,WAAZ,MAA6B,4DAA7B;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAIA,OAAO,SAAUX,OAAV,CAAkBY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,iBAAML,OAAO,iBAAiB,MAAjB,EAAyB;AAAEM,YAAAA,OAAO,EAAED,MAAM,CAACC;AAAlB,WAAzB,CAAP,CACbC,IADa,CACR,UAAAC,QAAQ;AAAA,mBAAIA,QAAJ;AAAA,WADA,CAAN;;AADP;AACCC,UAAAA,GADD;AAAA;AAGD,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACc,gBADV;AAERF,YAAAA,GAAG,EAAHA;AAFQ,WAAD,CAAT;;AAHC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAON;AAED,OAAO,SAAUf,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACCkB,UAAAA,SADD,GACa,WADb;AAEGC,UAAAA,UAFH,GAEgB,EAFhB;AAAA;AAGH,iBAAMZ,QAAQ,CAACa,SAAT,CAAmB;AACvBF,YAAAA,SAAS,EAATA,SADuB;AAEvBG,YAAAA,QAAQ,EAAE;AAFa,WAAnB,EAGHR,IAHG,CAGE,UAAAC,QAAQ,EAAI;AAClBN,YAAAA,MAAM,CAACc,MAAP,CAAc;AACZJ,cAAAA,SAAS,EAATA,SADY;AAEZK,cAAAA,KAAK,EAAET;AAFK,aAAd;AAIA,gBAAMU,aAAa,GAAGhB,MAAM,CAACiB,MAAP,CAAc,WAAd,CAAtB;AACAN,YAAAA,UAAU,CAACO,MAAX,GAAoBF,aAApB;AACD,WAVK,CAAN;;AAHG;AAAA;AAkBH,iBAAMjB,QAAQ,CAACa,SAAT,CAAmB;AACvBF,YAAAA,SAAS,EAATA,SADuB;AAEvBG,YAAAA,QAAQ,EAAE;AAFa,WAAnB,EAGHR,IAHG,CAGE,UAAAC,QAAQ,EAAI;AAClBL,YAAAA,KAAK,CAACa,MAAN,CAAa;AACXC,cAAAA,KAAK,EAAET,QAAQ,CAACa,GAAT,CAAapB,QAAQ,CAACqB,cAAtB,CADI;AAEXV,cAAAA,SAAS,EAATA;AAFW,aAAb;AAIA,gBAAMW,YAAY,GAAGpB,KAAK,CAACgB,MAAN,CAAa,WAAb,CAArB;AACAN,YAAAA,UAAU,CAACI,KAAX,GAAmBM,YAAnB;AACD,WAVK,CAAN;;AAlBG;AAAA;AAiCH,iBAAMtB,QAAQ,CAACa,SAAT,CAAmB;AACvBF,YAAAA,SAAS,EAATA,SADuB;AAEvBG,YAAAA,QAAQ,EAAE;AAFa,WAAnB,EAGHR,IAHG,CAGE,UAAAC,QAAQ,EAAI;AAClBJ,YAAAA,MAAM,CAACY,MAAP,CAAc;AACZQ,cAAAA,MAAM,EAAEhB,QAAQ,CAACa,GAAT,CAAapB,QAAQ,CAACwB,eAAtB,CADI;AAEZb,cAAAA,SAAS,EAATA;AAFY,aAAd;AAIA,gBAAMc,aAAa,GAAGtB,MAAM,CAACe,MAAP,CAAc,WAAd,CAAtB;AACAN,YAAAA,UAAU,CAACW,MAAX,GAAoBE,aAApB;AACD,WAVK,CAAN;;AAjCG;AAAA;AA6CH,iBAAM3B,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAAC8B,kBADV;AAERd,YAAAA,UAAU,EAAVA;AAFQ,WAAD,CAAT;;AA7CG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiDN;AAED,OAAO,SAAUlB,YAAV,CAAuBU,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMN,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAAC8B,kBADV;AAERd,YAAAA,UAAU,EAAER,MAAM,CAACQ;AAFX,WAAD,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAUjB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAM,CACJE,UAAU,CAACD,WAAW,CAAC+B,gBAAb,EAA+BnC,OAA/B,CADN,EAEJK,UAAU,CAACD,WAAW,CAACgC,kBAAb,EAAiCnC,iBAAjC,CAFN,EAGJI,UAAU,CAACD,WAAW,CAACiC,0BAAb,EAAyCnC,YAAzC,CAHN,CAAN;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as actionTypes from '../../components/Common/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put } from 'redux-saga/effects';\nimport callBff from '../callBff.js'\n\nimport Airtable from \"../../data/airtable\";\nimport Orders from \"../../data/orders\";\nimport Items from \"../../data/items\";\nimport Addons from \"../../data/addons\";\n\n\n\nexport function* sendSms(action) {\n  const res = yield callBff(`ordering/sms`, 'POST', { message: action.message })\n      .then(response => response)\n      yield put({\n        type: actionTypes.SEND_SMS_SUCCESS,\n        res,\n      })\n};\n\nexport function* getCompleteOrders() {\n  const venueName = \"Hopscotch\";\n    const orderState = {}\n    yield Airtable.fetchBase({\n      venueName,\n      baseName: \"Orders\"\n    }).then(response => {\n      Orders.setAll({\n        venueName,\n        items: response\n      });\n      const currentOrders = Orders.getAll(\"Hopscotch\");\n      orderState.orders = currentOrders;\n    });\n\n    /**\n     * Get all current available items to map with the order.\n     */\n    yield Airtable.fetchBase({\n      venueName,\n      baseName: \"Database\"\n    }).then(response => {\n      Items.setAll({\n        items: response.map(Airtable.mapItemColumns),\n        venueName\n      });\n      const currentItems = Items.getAll(\"Hopscotch\");\n      orderState.items = currentItems;\n    });\n\n    /**\n     * Get all current available items to map with the order.\n     */\n    yield Airtable.fetchBase({\n      venueName,\n      baseName: \"Add-On by Group\"\n    }).then(response => {\n      Addons.setAll({\n        addons: response.map(Airtable.mapAddonColumns),\n        venueName\n      });\n      const currentAddons = Addons.getAll(\"Hopscotch\");\n      orderState.addons = currentAddons;\n    });\n\n    yield put({\n      type: actionTypes.GET_ORDERS_SUCCESS,\n      orderState,\n    })\n};\n\nexport function* updateOrders(action) {\n  yield put({\n    type: actionTypes.GET_ORDERS_SUCCESS,\n    orderState: action.orderState,\n  })\n}\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.SEND_SMS_REQUEST, sendSms),\n    takeLatest(actionTypes.GET_ORDERS_REQUEST, getCompleteOrders),\n    takeLatest(actionTypes.UPDATE_ORDER_STATE_REQUEST, updateOrders),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}