{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/avcmerchantappN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(sendSms),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateAirtableOrder),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCompleteOrders),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateOrders),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Common/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put } from 'redux-saga/effects';\nimport callBff from '../callBff.js';\nimport callAirtable from '../callAirtable.js';\nimport * as utils from '../../utils/orderUtils';\nexport function sendSms(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function sendSms$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return callBff(\"ordering/sms\", 'POST', {\n            redemptionCode: action.redemptionCode,\n            number: action.number,\n            name: action.name\n          }).then(function (response) {\n            return response;\n          });\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return put({\n            type: actionTypes.SEND_SMS_SUCCESS,\n            res: res\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n;\nexport function updateAirtableOrder(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function updateAirtableOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return callAirtable(action.ids, 'PATCH', action.fields).then(function (response) {\n            return response;\n          });\n\n        case 2:\n          res = _context2.sent;\n          _context2.next = 5;\n          return put({\n            type: actionTypes.UPDATE_AIRTABLE_SUCCESS,\n            res: res\n          });\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function getCompleteOrders() {\n  var rawOrders, orderState;\n  return _regeneratorRuntime.wrap(function getCompleteOrders$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return utils.airtableFetch();\n\n        case 2:\n          rawOrders = _context3.sent;\n          _context3.next = 5;\n          return utils.mapOrdersToData(rawOrders);\n\n        case 5:\n          orderState = _context3.sent;\n          _context3.next = 8;\n          return put({\n            type: actionTypes.GET_ORDERS_SUCCESS,\n            orderState: orderState\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n;\nexport function updateOrders(action) {\n  return _regeneratorRuntime.wrap(function updateOrders$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return put({\n            type: actionTypes.GET_ORDERS_SUCCESS,\n            orderState: action.orderState\n          });\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return [takeLatest(actionTypes.SEND_SMS_REQUEST, sendSms), takeLatest(actionTypes.GET_ORDERS_REQUEST, getCompleteOrders), takeLatest(actionTypes.UPDATE_ORDER_STATE_REQUEST, updateOrders), takeLatest(actionTypes.UPDATE_AIRTABLE_REQUEST, updateAirtableOrder)];\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/avcmerchantappN/src/integration/sagas/ordersIntegration.js"],"names":["sendSms","updateAirtableOrder","getCompleteOrders","updateOrders","actionWatcher","actionTypes","takeLatest","put","callBff","callAirtable","utils","action","redemptionCode","number","name","then","response","res","type","SEND_SMS_SUCCESS","ids","fields","UPDATE_AIRTABLE_SUCCESS","airtableFetch","rawOrders","mapOrdersToData","orderState","GET_ORDERS_SUCCESS","SEND_SMS_REQUEST","GET_ORDERS_REQUEST","UPDATE_ORDER_STATE_REQUEST","UPDATE_AIRTABLE_REQUEST"],"mappings":";;;;yBAOiBA,O;;;yBAeAC,mB;;;yBAYAC,iB;;;yBAYAC,Y;;;yBAOAC,a;;AArDjB,OAAO,KAAKC,WAAZ,MAA6B,4DAA7B;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,wBAAvB;AAGA,OAAO,SAAUV,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,iBAAMH,OAAO,iBAAiB,MAAjB,EACvB;AACEI,YAAAA,cAAc,EAAED,MAAM,CAACC,cADzB;AAEEC,YAAAA,MAAM,EAAEF,MAAM,CAACE,MAFjB;AAGEC,YAAAA,IAAI,EAAEH,MAAM,CAACG;AAHf,WADuB,CAAP,CAOfC,IAPe,CAOV,UAAAC,QAAQ;AAAA,mBAAIA,QAAJ;AAAA,WAPE,CAAN;;AADP;AACCC,UAAAA,GADD;AAAA;AASD,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACc,gBADV;AAERF,YAAAA,GAAG,EAAHA;AAFQ,WAAD,CAAT;;AATC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaN;AAED,OAAO,SAAUhB,mBAAV,CAA8BU,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,iBAAMF,YAAY,CAACE,MAAM,CAACS,GAAR,EAAa,OAAb,EAAsBT,MAAM,CAACU,MAA7B,CAAZ,CACjBN,IADiB,CACZ,UAAAC,QAAQ;AAAA,mBAAIA,QAAJ;AAAA,WADI,CAAN;;AADP;AACCC,UAAAA,GADD;AAAA;AAIL,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACiB,uBADV;AAERL,YAAAA,GAAG,EAAHA;AAFQ,WAAD,CAAT;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,OAAO,SAAUf,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEa,iBAAMQ,KAAK,CAACa,aAAN,EAAN;;AAFb;AAECC,UAAAA,SAFD;AAAA;AAGc,iBAAMd,KAAK,CAACe,eAAN,CAAsBD,SAAtB,CAAN;;AAHd;AAGCE,UAAAA,UAHD;AAAA;AAKL,iBAAMnB,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACsB,kBADV;AAERD,YAAAA,UAAU,EAAVA;AAFQ,WAAD,CAAT;;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASN;AAGD,OAAO,SAAUvB,YAAV,CAAuBQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMJ,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEb,WAAW,CAACsB,kBADV;AAERD,YAAAA,UAAU,EAAEf,MAAM,CAACe;AAFX,WAAD,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAUtB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAM,CACJE,UAAU,CAACD,WAAW,CAACuB,gBAAb,EAA+B5B,OAA/B,CADN,EAEJM,UAAU,CAACD,WAAW,CAACwB,kBAAb,EAAiC3B,iBAAjC,CAFN,EAGJI,UAAU,CAACD,WAAW,CAACyB,0BAAb,EAAyC3B,YAAzC,CAHN,EAIJG,UAAU,CAACD,WAAW,CAAC0B,uBAAb,EAAsC9B,mBAAtC,CAJN,CAAN;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as actionTypes from '../../components/Common/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put } from 'redux-saga/effects';\nimport callBff from '../callBff.js'\nimport callAirtable from '../callAirtable.js';\nimport * as utils from '../../utils/orderUtils';\n\n\nexport function* sendSms(action) {\n  const res = yield callBff(`ordering/sms`, 'POST',\n    { \n      redemptionCode: action.redemptionCode,\n      number: action.number,\n      name: action.name \n    }\n  )\n    .then(response => response)\n      yield put({\n        type: actionTypes.SEND_SMS_SUCCESS,\n        res,\n      })\n};\n\nexport function* updateAirtableOrder(action){\n  const res = yield callAirtable(action.ids, 'PATCH', action.fields)\n  .then(response => response);\n\n  yield put({\n    type: actionTypes.UPDATE_AIRTABLE_SUCCESS,\n    res,\n  })\n}\n\n\n\nexport function* getCompleteOrders() {\n  \n  const rawOrders = yield utils.airtableFetch();\n  const orderState = yield utils.mapOrdersToData(rawOrders);\n\n  yield put({\n    type: actionTypes.GET_ORDERS_SUCCESS,\n    orderState,\n  })\n};\n\n\nexport function* updateOrders(action) {\n  yield put({\n    type: actionTypes.GET_ORDERS_SUCCESS,\n    orderState: action.orderState,\n  })\n}\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.SEND_SMS_REQUEST, sendSms),\n    takeLatest(actionTypes.GET_ORDERS_REQUEST, getCompleteOrders),\n    takeLatest(actionTypes.UPDATE_ORDER_STATE_REQUEST, updateOrders),\n    takeLatest(actionTypes.UPDATE_AIRTABLE_REQUEST, updateAirtableOrder),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}